// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using practice_7_api.DatabaseContext;

#nullable disable

namespace practice_7_api.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20251017104111_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("practice_7_api.Models.Author", b =>
                {
                    b.Property<int>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("author_id"));

                    b.Property<DateOnly>("author_date_birth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("author_date_death")
                        .HasColumnType("date");

                    b.Property<string>("author_first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author_last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("author_id");

                    b.ToTable("Athores");
                });

            modelBuilder.Entity("practice_7_api.Models.Book", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"));

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genre_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("public_date")
                        .HasColumnType("date");

                    b.HasKey("book_id");

                    b.HasIndex("author_id");

                    b.HasIndex("genre_id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("practice_7_api.Models.Genre", b =>
                {
                    b.Property<int>("genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genre_id"));

                    b.Property<string>("genre_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("genre_id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("practice_7_api.Models.Reader", b =>
                {
                    b.Property<int>("reader_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reader_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("reader_date_birth")
                        .HasColumnType("date");

                    b.Property<string>("reader_first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reader_last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("reader_id");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("practice_7_api.Models.Rent_Book", b =>
                {
                    b.Property<int>("rent_book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rent_book_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("end_date")
                        .HasColumnType("date");

                    b.Property<int>("reader_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("start_date")
                        .HasColumnType("date");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.HasKey("rent_book_id");

                    b.HasIndex("book_id");

                    b.HasIndex("reader_id");

                    b.HasIndex("status_id");

                    b.ToTable("Rent_Books");
                });

            modelBuilder.Entity("practice_7_api.Models.Status", b =>
                {
                    b.Property<int>("status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("status_id"));

                    b.Property<string>("status_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("status_id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("practice_7_api.Models.Book", b =>
                {
                    b.HasOne("practice_7_api.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_7_api.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("practice_7_api.Models.Rent_Book", b =>
                {
                    b.HasOne("practice_7_api.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_7_api.Models.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("reader_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("practice_7_api.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
